// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package al_omran_pipeline_project.clientfiltredata_job_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ClientFiltreData_Job Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class ClientFiltreData_Job implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ClientFiltreData_Job";
	private final String projectName = "AL_OMRAN_PIPELINE_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ClientFiltreData_Job.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ClientFiltreData_Job.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		static byte[] commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_client;

		public int getId_client() {
			return this.id_client;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Telelphone;

		public String getTelelphone() {
			return this.Telelphone;
		}

		public Integer Num_Rue;

		public Integer getNum_Rue() {
			return this.Num_Rue;
		}

		public String Nom_Avenue;

		public String getNom_Avenue() {
			return this.Nom_Avenue;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_client;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.id_client != other.id_client)
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.id_client = this.id_client;
			other.Nom = this.Nom;
			other.Prenom = this.Prenom;
			other.Telelphone = this.Telelphone;
			other.Num_Rue = this.Num_Rue;
			other.Nom_Avenue = this.Nom_Avenue;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.id_client = this.id_client;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Telelphone = readString(dis);

					this.Num_Rue = readInteger(dis);

					this.Nom_Avenue = readString(dis);

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Telelphone = readString(dis);

					this.Num_Rue = readInteger(dis);

					this.Nom_Avenue = readString(dis);

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Telelphone, dos);

				// Integer

				writeInteger(this.Num_Rue, dos);

				// String

				writeString(this.Nom_Avenue, dos);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Telelphone, dos);

				// Integer

				writeInteger(this.Num_Rue, dos);

				// String

				writeString(this.Nom_Avenue, dos);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_client=" + String.valueOf(id_client));
			sb.append(",Nom=" + Nom);
			sb.append(",Prenom=" + Prenom);
			sb.append(",Telelphone=" + Telelphone);
			sb.append(",Num_Rue=" + String.valueOf(Num_Rue));
			sb.append(",Nom_Avenue=" + Nom_Avenue);
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		static byte[] commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];

		public int id_client;

		public int getId_client() {
			return this.id_client;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		public Integer Num_Rue;

		public Integer getNum_Rue() {
			return this.Num_Rue;
		}

		public String Nom_Avenue_Ville;

		public String getNom_Avenue_Ville() {
			return this.Nom_Avenue_Ville;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Telephone = readString(dis);

					this.Num_Rue = readInteger(dis);

					this.Nom_Avenue_Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Telephone = readString(dis);

					this.Num_Rue = readInteger(dis);

					this.Nom_Avenue_Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Telephone, dos);

				// Integer

				writeInteger(this.Num_Rue, dos);

				// String

				writeString(this.Nom_Avenue_Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Telephone, dos);

				// Integer

				writeInteger(this.Num_Rue, dos);

				// String

				writeString(this.Nom_Avenue_Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_client=" + String.valueOf(id_client));
			sb.append(",Nom=" + Nom);
			sb.append(",Prenom=" + Prenom);
			sb.append(",Telephone=" + Telephone);
			sb.append(",Num_Rue=" + String.valueOf(Num_Rue));
			sb.append(",Nom_Avenue_Ville=" + Nom_Avenue_Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		static byte[] commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];

		public int id_client;

		public int getId_client() {
			return this.id_client;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Adresse;

		public String getAdresse() {
			return this.Adresse;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_client=" + String.valueOf(id_client));
			sb.append(",Nom=" + Nom);
			sb.append(",Prenom=" + Prenom);
			sb.append(",Adresse=" + Adresse);
			sb.append(",Telephone=" + Telephone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		static byte[] commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_client;

		public int getId_client() {
			return this.id_client;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Adresse;

		public String getAdresse() {
			return this.Adresse;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_client;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id_client != other.id_client)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id_client = this.id_client;
			other.Nom = this.Nom;
			other.Prenom = this.Prenom;
			other.Adresse = this.Adresse;
			other.Telephone = this.Telephone;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id_client = this.id_client;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_client=" + String.valueOf(id_client));
			sb.append(",Nom=" + Nom);
			sb.append(",Prenom=" + Prenom);
			sb.append(",Adresse=" + Adresse);
			sb.append(",Telephone=" + Telephone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		static byte[] commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_client;

		public int getId_client() {
			return this.id_client;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Adresse;

		public String getAdresse() {
			return this.Adresse;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_client;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.id_client != other.id_client)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.id_client = this.id_client;
			other.Nom = this.Nom;
			other.Prenom = this.Prenom;
			other.Adresse = this.Adresse;
			other.Telephone = this.Telephone;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.id_client = this.id_client;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_client=" + String.valueOf(id_client));
			sb.append(",Nom=" + Nom);
			sb.append(",Prenom=" + Prenom);
			sb.append(",Adresse=" + Adresse);
			sb.append(",Telephone=" + Telephone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		static byte[] commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_client;

		public int getId_client() {
			return this.id_client;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Adresse;

		public String getAdresse() {
			return this.Adresse;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_client;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.id_client != other.id_client)
				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.id_client = this.id_client;
			other.Nom = this.Nom;
			other.Prenom = this.Prenom;
			other.Adresse = this.Adresse;
			other.Telephone = this.Telephone;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.id_client = this.id_client;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_client=" + String.valueOf(id_client));
			sb.append(",Nom=" + Nom);
			sb.append(",Prenom=" + Prenom);
			sb.append(",Adresse=" + Adresse);
			sb.append(",Telephone=" + Telephone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		static byte[] commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_client;

		public int getId_client() {
			return this.id_client;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Adresse;

		public String getAdresse() {
			return this.Adresse;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_client;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id_client != other.id_client)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id_client = this.id_client;
			other.Nom = this.Nom;
			other.Prenom = this.Prenom;
			other.Adresse = this.Adresse;
			other.Telephone = this.Telephone;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id_client = this.id_client;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length) {
					if (length < 1024 && commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job.length == 0) {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[1024];
					} else {
						commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length);
				strReturn = new String(commonByteArray_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_AL_OMRAN_PIPELINE_PROJECT_ClientFiltreData_Job) {

				try {

					int length = 0;

					this.id_client = dis.readInt();

					this.Nom = readString(dis);

					this.Prenom = readString(dis);

					this.Adresse = readString(dis);

					this.Telephone = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.id_client);

				// String

				writeString(this.Nom, dos);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Adresse, dos);

				// String

				writeString(this.Telephone, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_client=" + String.valueOf(id_client));
			sb.append(",Nom=" + Nom);
			sb.append(",Prenom=" + Prenom);
			sb.append(",Adresse=" + Adresse);
			sb.append(",Telephone=" + Telephone);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_client, other.id_client);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				row5Struct row5 = new row5Struct();
				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "public";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("DIM_CLIENT");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("DIM_CLIENT");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "Al_Omran_DW";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:NUCc0LwQzg+Otjg7VmLa8DWu6+mds3g2Jeftm+ddknE=");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"");
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
							+ "\"(\"id_client\" INT4  not null ,\"Nom\" VARCHAR(255)  ,\"Prenom\" VARCHAR(255)  ,\"Telelphone\" VARCHAR(255)  ,\"Num_Rue\" INT4 ,\"Nom_Avenue\" VARCHAR(255)  ,\"Ville\" VARCHAR(255)  ,primary key(\"id_client\"))");
				}
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"id_client\",\"Nom\",\"Prenom\",\"Telelphone\",\"Num_Rue\",\"Nom_Avenue\",\"Ville\") VALUES (?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				row7Struct row7_tmp = new row7Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				row6Struct row6_tmp = new row6Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFilterRow_4 begin ] start
				 */

				ok_Hash.put("tFilterRow_4", false);
				start_Hash.put("tFilterRow_4", System.currentTimeMillis());

				currentComponent = "tFilterRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFilterRow_4 = 0;

				int nb_line_tFilterRow_4 = 0;
				int nb_line_ok_tFilterRow_4 = 0;
				int nb_line_reject_tFilterRow_4 = 0;

				class Operator_tFilterRow_4 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_4(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_4 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "postgres";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:MbC3e7qdSMrILgXAkLoEb91XnbDzkPJKME9lBwRUNqU=");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "AL_Omran";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  \"public\".\"Client\".\"id_client\", \n  \"public\".\"Client\".\"Nom\", \n  \"public\".\"Client\".\"Prenom\", \n"
						+ "  \"public\".\"Client\".\"Adresse\", \n  \"public\".\"Client\".\"Telephone\"\nFROM \"public\".\"Client\"";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.id_client = 0;
						} else {

							row1.id_client = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.Nom = null;
						} else {

							row1.Nom = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.Prenom = null;
						} else {

							row1.Prenom = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.Adresse = null;
						} else {

							row1.Adresse = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.Telephone = null;
						} else {

							row1.Telephone = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						row2 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
						ope_tFilterRow_1.matches((// code sample : use row1 to define the condition.
// row1.columnName1.equals("foo") ||!(row1.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
						row1.Nom.trim().length() != 0), "advanced condition failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row2 == null) {
								row2 = new row2Struct();
							}
							row2.id_client = row1.id_client;
							row2.Nom = row1.Nom;
							row2.Prenom = row1.Prenom;
							row2.Adresse = row1.Adresse;
							row2.Telephone = row1.Telephone;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

							row3 = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
							ope_tFilterRow_2.matches((// code sample : use row2 to define the condition.
// row2.columnName1.equals("foo") ||!(row2.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							row2.Prenom.trim().length() != 0), "advanced condition failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (row3 == null) {
									row3 = new row3Struct();
								}
								row3.id_client = row2.id_client;
								row3.Nom = row2.Nom;
								row3.Prenom = row2.Prenom;
								row3.Adresse = row2.Adresse;
								row3.Telephone = row2.Telephone;
								nb_line_ok_tFilterRow_2++;
							} else {
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */

							/**
							 * [tFilterRow_2 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tFilterRow_3 main ] start
								 */

								currentComponent = "tFilterRow_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row3"

									);
								}

								row4 = null;
								Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
								ope_tFilterRow_3.matches((// code sample : use row3 to define the condition.
// row3.columnName1.equals("foo") ||!(row3.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
								row3.Adresse.trim().length() != 0), "advanced condition failed");

								if (ope_tFilterRow_3.getMatchFlag()) {
									if (row4 == null) {
										row4 = new row4Struct();
									}
									row4.id_client = row3.id_client;
									row4.Nom = row3.Nom;
									row4.Prenom = row3.Prenom;
									row4.Adresse = row3.Adresse;
									row4.Telephone = row3.Telephone;
									nb_line_ok_tFilterRow_3++;
								} else {
									nb_line_reject_tFilterRow_3++;
								}

								nb_line_tFilterRow_3++;

								tos_count_tFilterRow_3++;

								/**
								 * [tFilterRow_3 main ] stop
								 */

								/**
								 * [tFilterRow_3 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_3";

								/**
								 * [tFilterRow_3 process_data_begin ] stop
								 */
// Start of branch "row4"
								if (row4 != null) {

									/**
									 * [tFilterRow_4 main ] start
									 */

									currentComponent = "tFilterRow_4";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row4"

										);
									}

									row5 = null;
									Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
									ope_tFilterRow_4.matches((// code sample : use row4 to define the condition.
// row4.columnName1.equals("foo") ||!(row4.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
									row4.Telephone.trim().length() != 0), "advanced condition failed");

									if (ope_tFilterRow_4.getMatchFlag()) {
										if (row5 == null) {
											row5 = new row5Struct();
										}
										row5.id_client = row4.id_client;
										row5.Nom = row4.Nom;
										row5.Prenom = row4.Prenom;
										row5.Adresse = row4.Adresse;
										row5.Telephone = row4.Telephone;
										nb_line_ok_tFilterRow_4++;
									} else {
										nb_line_reject_tFilterRow_4++;
									}

									nb_line_tFilterRow_4++;

									tos_count_tFilterRow_4++;

									/**
									 * [tFilterRow_4 main ] stop
									 */

									/**
									 * [tFilterRow_4 process_data_begin ] start
									 */

									currentComponent = "tFilterRow_4";

									/**
									 * [tFilterRow_4 process_data_begin ] stop
									 */
// Start of branch "row5"
									if (row5 != null) {

										/**
										 * [tMap_1 main ] start
										 */

										currentComponent = "tMap_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row5"

											);
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_1 = false;
										boolean mainRowRejected_tMap_1 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
											// ###############################
											// # Output tables

											row6 = null;

// # Output table : 'row6'
											row6_tmp.id_client = row5.id_client;
											row6_tmp.Nom = row5.Nom;
											row6_tmp.Prenom = row5.Prenom;
											row6_tmp.Telephone = row5.Telephone;
											row6_tmp.Num_Rue = Integer.parseInt(row1.Adresse.replaceAll("[^0-9]", ""));
											row6_tmp.Nom_Avenue_Ville = row1.Adresse.replaceAll("[0-9]", "");
											row6 = row6_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_1 = false;

										tos_count_tMap_1++;

										/**
										 * [tMap_1 main ] stop
										 */

										/**
										 * [tMap_1 process_data_begin ] start
										 */

										currentComponent = "tMap_1";

										/**
										 * [tMap_1 process_data_begin ] stop
										 */
// Start of branch "row6"
										if (row6 != null) {

											/**
											 * [tMap_2 main ] start
											 */

											currentComponent = "tMap_2";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "row6"

												);
											}

											boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_2 = false;
											boolean mainRowRejected_tMap_2 = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
												// ###############################
												// # Output tables

												row7 = null;

// # Output table : 'row7'
												row7_tmp.id_client = row6.id_client;
												row7_tmp.Nom = row6.Nom;
												row7_tmp.Prenom = row6.Prenom;
												row7_tmp.Telelphone = row6.Telephone;
												row7_tmp.Num_Rue = row6.Num_Rue;
												row7_tmp.Nom_Avenue = row6.Nom_Avenue_Ville.substring(0,
														row6.Nom_Avenue_Ville.indexOf(","));
												row7_tmp.Ville = row6.Nom_Avenue_Ville
														.substring(row6.Nom_Avenue_Ville.indexOf(","),
																row6.Nom_Avenue_Ville.length())
														.replace(",", "");
												row7 = row7_tmp;
// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_2 = false;

											tos_count_tMap_2++;

											/**
											 * [tMap_2 main ] stop
											 */

											/**
											 * [tMap_2 process_data_begin ] start
											 */

											currentComponent = "tMap_2";

											/**
											 * [tMap_2 process_data_begin ] stop
											 */
// Start of branch "row7"
											if (row7 != null) {

												/**
												 * [tDBOutput_1 main ] start
												 */

												currentComponent = "tDBOutput_1";

												if (execStat) {
													runStat.updateStatOnConnection(iterateId, 1, 1

															, "row7"

													);
												}

												whetherReject_tDBOutput_1 = false;
												pstmt_tDBOutput_1.setInt(1, row7.id_client);

												if (row7.Nom == null) {
													pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_1.setString(2, row7.Nom);
												}

												if (row7.Prenom == null) {
													pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_1.setString(3, row7.Prenom);
												}

												if (row7.Telelphone == null) {
													pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_1.setString(4, row7.Telelphone);
												}

												if (row7.Num_Rue == null) {
													pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
												} else {
													pstmt_tDBOutput_1.setInt(5, row7.Num_Rue);
												}

												if (row7.Nom_Avenue == null) {
													pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_1.setString(6, row7.Nom_Avenue);
												}

												if (row7.Ville == null) {
													pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_1.setString(7, row7.Ville);
												}

												pstmt_tDBOutput_1.addBatch();
												nb_line_tDBOutput_1++;

												batchSizeCounter_tDBOutput_1++;

												if ((batchSize_tDBOutput_1 > 0)
														&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
													try {
														int countSum_tDBOutput_1 = 0;

														for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
																.executeBatch()) {
															countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																	: countEach_tDBOutput_1);
														}
														rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

														insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

														batchSizeCounter_tDBOutput_1 = 0;
													} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
														globalMap.put("tDBOutput_1_ERROR_MESSAGE",
																e_tDBOutput_1.getMessage());
														java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
																.getNextException(), sqle_tDBOutput_1 = null;
														String errormessage_tDBOutput_1;
														if (ne_tDBOutput_1 != null) {
															// build new exception to provide the original cause
															sqle_tDBOutput_1 = new java.sql.SQLException(
																	e_tDBOutput_1.getMessage() + "\ncaused by: "
																			+ ne_tDBOutput_1.getMessage(),
																	ne_tDBOutput_1.getSQLState(),
																	ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
															errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
														} else {
															errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
														}

														int countSum_tDBOutput_1 = 0;
														for (int countEach_tDBOutput_1 : e_tDBOutput_1
																.getUpdateCounts()) {
															countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																	: countEach_tDBOutput_1);
														}
														rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

														insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

														System.err.println(errormessage_tDBOutput_1);

													}
												}

												commitCounter_tDBOutput_1++;
												if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
													if ((batchSize_tDBOutput_1 > 0)
															&& (batchSizeCounter_tDBOutput_1 > 0)) {
														try {
															int countSum_tDBOutput_1 = 0;

															for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
																	.executeBatch()) {
																countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																		: countEach_tDBOutput_1);
															}
															rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

															insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

															batchSizeCounter_tDBOutput_1 = 0;
														} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
															globalMap.put("tDBOutput_1_ERROR_MESSAGE",
																	e_tDBOutput_1.getMessage());
															java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
																	.getNextException(), sqle_tDBOutput_1 = null;
															String errormessage_tDBOutput_1;
															if (ne_tDBOutput_1 != null) {
																// build new exception to provide the original cause
																sqle_tDBOutput_1 = new java.sql.SQLException(
																		e_tDBOutput_1.getMessage() + "\ncaused by: "
																				+ ne_tDBOutput_1.getMessage(),
																		ne_tDBOutput_1.getSQLState(),
																		ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
																errormessage_tDBOutput_1 = sqle_tDBOutput_1
																		.getMessage();
															} else {
																errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
															}

															int countSum_tDBOutput_1 = 0;
															for (int countEach_tDBOutput_1 : e_tDBOutput_1
																	.getUpdateCounts()) {
																countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																		: countEach_tDBOutput_1);
															}
															rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

															insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

															System.err.println(errormessage_tDBOutput_1);

														}
													}
													if (rowsToCommitCount_tDBOutput_1 != 0) {

													}
													conn_tDBOutput_1.commit();
													if (rowsToCommitCount_tDBOutput_1 != 0) {

														rowsToCommitCount_tDBOutput_1 = 0;
													}
													commitCounter_tDBOutput_1 = 0;
												}

												tos_count_tDBOutput_1++;

												/**
												 * [tDBOutput_1 main ] stop
												 */

												/**
												 * [tDBOutput_1 process_data_begin ] start
												 */

												currentComponent = "tDBOutput_1";

												/**
												 * [tDBOutput_1 process_data_begin ] stop
												 */

												/**
												 * [tDBOutput_1 process_data_end ] start
												 */

												currentComponent = "tDBOutput_1";

												/**
												 * [tDBOutput_1 process_data_end ] stop
												 */

											} // End of branch "row7"

											/**
											 * [tMap_2 process_data_end ] start
											 */

											currentComponent = "tMap_2";

											/**
											 * [tMap_2 process_data_end ] stop
											 */

										} // End of branch "row6"

										/**
										 * [tMap_1 process_data_end ] start
										 */

										currentComponent = "tMap_1";

										/**
										 * [tMap_1 process_data_end ] stop
										 */

									} // End of branch "row5"

									/**
									 * [tFilterRow_4 process_data_end ] start
									 */

									currentComponent = "tFilterRow_4";

									/**
									 * [tFilterRow_4 process_data_end ] stop
									 */

								} // End of branch "row4"

								/**
								 * [tFilterRow_3 process_data_end ] start
								 */

								currentComponent = "tFilterRow_3";

								/**
								 * [tFilterRow_3 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFilterRow_2 process_data_end ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFilterRow_1 process_data_end ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tFilterRow_4 end ] start
				 */

				currentComponent = "tFilterRow_4";

				globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFilterRow_4", true);
				end_Hash.put("tFilterRow_4", System.currentTimeMillis());

				/**
				 * [tFilterRow_4 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(errormessage_tDBOutput_1);

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ClientFiltreData_Job ClientFiltreData_JobClass = new ClientFiltreData_Job();

		int exitCode = ClientFiltreData_JobClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ClientFiltreData_Job.class.getClassLoader().getResourceAsStream(
					"al_omran_pipeline_project/clientfiltredata_job_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ClientFiltreData_Job.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : ClientFiltreData_Job");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 125769 characters generated by Talend Open Studio for Data Integration on the
 * May 16, 2024 at 6:20:47 PM WEST
 ************************************************************************************************/